---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out k8s.yaml
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: django-project
  name: django_project
  namespace: default
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    io.kompose.service: django-project
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out k8s.yaml
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: nginx
  name: nginx
  namespace: default
spec:
  ports:
    - name: "80"
      port: 80
      targetPort: 80
  selector:
    io.kompose.service: nginx
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out k8s.yaml
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: portainer
  name: portainer
  namespace: default
spec:
  ports:
    - name: "9000"
      port: 9000
      targetPort: 9000
  selector:
    io.kompose.service: portainer
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out k8s.yaml
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: db
  name: db
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: db
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml --out k8s.yaml
        kompose.version: 1.30.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/django-project-default: "true"
        io.kompose.service: db
    spec:
      containers:
        - args:
            - --default-authentication-plugin=mysql_native_password
          env:
            - name: MYSQL_DATABASE
              value: django_project
            - name: MYSQL_PASSWORD
              value: admin
            - name: MYSQL_ROOT_PASSWORD
              value: admin
            - name: MYSQL_USER
              value: admin
          image: mysql:8
          name: django-project-mysql
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out k8s.yaml
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: django-project
  name: django-project
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: django-project
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml --out k8s.yaml
        kompose.version: 1.30.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/django-project-default: "true"
        io.kompose.service: django-project
    spec:
      containers:
        - args:
            - /scripts/wait-for-it.sh
            - db:3306
            - -t
            - "30"
            - --
            - /scripts/command-dev.sh
          image: django-project
          name: django-project
          ports:
            - containerPort: 8080
              hostPort: 8080
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /src
              name: django-project-claim0
            - mountPath: /scripts
              name: django-project-claim1
      restartPolicy: Always
      volumes:
        - name: django-project-claim0
          persistentVolumeClaim:
            claimName: django-project-claim0
        - name: django-project-claim1
          persistentVolumeClaim:
            claimName: django-project-claim1
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: django-project-claim0
  name: django-project-claim0
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: django-project-claim1
  name: django-project-claim1
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out k8s.yaml
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: nginx
  name: nginx
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: nginx
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml --out k8s.yaml
        kompose.version: 1.30.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/django-project-default: "true"
        io.kompose.service: nginx
    spec:
      containers:
        - image: nginx:latest
          name: django-project-nginx
          ports:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /static
              name: nginx-claim0
            - mountPath: /media
              name: nginx-claim1
            - mountPath: /etc/nginx/conf.d
              name: nginx-claim2
      restartPolicy: Always
      volumes:
        - name: nginx-claim0
          persistentVolumeClaim:
            claimName: nginx-claim0
        - name: nginx-claim1
          persistentVolumeClaim:
            claimName: nginx-claim1
        - name: nginx-claim2
          persistentVolumeClaim:
            claimName: nginx-claim2
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: nginx-claim0
  name: nginx-claim0
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: nginx-claim1
  name: nginx-claim1
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: nginx-claim2
  name: nginx-claim2
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out k8s.yaml
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: portainer
  name: portainer
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: portainer
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml --out k8s.yaml
        kompose.version: 1.30.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/django-project-default: "true"
        io.kompose.service: portainer
    spec:
      containers:
        - image: portainer/portainer
          name: portainer
          ports:
            - containerPort: 9000
              hostPort: 9000
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/run/docker.sock
              name: portainer-claim0
            - mountPath: /data
              name: portainer-data
      restartPolicy: Always
      volumes:
        - name: portainer-claim0
          persistentVolumeClaim:
            claimName: portainer-claim0
        - name: portainer-data
          persistentVolumeClaim:
            claimName: portainer-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: portainer-claim0
  name: portainer-claim0
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: portainer-data
  name: portainer-data
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: django-project-claim0-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/str/django-project-claim0-pv"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: django-project-claim1-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/str/django-project-claim1-pv"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nginx-claim0-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/str/nginx-claim0-pv"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nginx-claim1-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/str/nginx-claim1-pv"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nginx-claim2-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/str/nginx-claim2-pv"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: portainer-claim0-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/str/portainer-claim0-pv"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: portainer-data-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/str/portainer-data-pv"
